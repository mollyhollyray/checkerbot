const github = require('./github');
const storage = require('./storage');
const { log, logError } = require('../utils/logger');

module.exports = {
  async checkAllRepos(bot) {
    try {
      const repos = storage.getRepos();
      if (!repos || repos.length === 0) {
        log('–ù–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
        return [];
      }

      log(`–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É ${repos.length} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤`);
      const updates = [];

      for (const [repoKey, repoData] of repos) {
        try {
          const [owner, repo] = repoKey.split('/');
          const branch = repoData.branch || repoData.defaultBranch || 'main';

          log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º ${repoKey} (${branch})`);
          const latestCommit = await github.getBranchLastCommit(owner, repo, branch);

          if (!latestCommit || !latestCommit.sha) {
            logError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç –¥–ª—è ${repoKey}`);
            continue;
          }

          if (!repoData.lastCommitSha) {
            await storage.updateRepoCommit(owner, repo, latestCommit);
            log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repoKey}`);
            continue;
          }

          if (latestCommit.sha !== repoData.lastCommitSha) {
            log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ ${repoKey}`);
            updates.push({
              repoKey,
              branch,
              newSha: latestCommit.sha,
              oldSha: repoData.lastCommitSha,
              message: latestCommit.commit.message.split('\n')[0],
              url: latestCommit.html_url
            });

            await storage.updateRepoCommit(owner, repo, latestCommit);
            await this.sendUpdateNotification(bot, updates[updates.length - 1]);
          }
        } catch (error) {
          logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${repoKey}: ${error.message}`);
        }
      }

      log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${updates.length}`);
      return updates;
    } catch (error) {
      logError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ checkAllRepos: ${error.message}`);
      return [];
    }
  },

  async sendUpdateNotification(bot, update) {
    try {
      const message = this.formatUpdateMessage(update);
      await bot.telegram.sendMessage(
        process.env.ADMIN_USER_ID,
        message,
        { disable_web_page_preview: true }
      );
    } catch (error) {
      logError(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
    }
  },

  formatUpdateMessage(update) {
    return `
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ ${update.repoKey} (${update.branch})
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
–ë—ã–ª–æ: ${update.oldSha.slice(0, 7)}
–°—Ç–∞–ª–æ: ${update.newSha.slice(0, 7)}

üìù ${update.message.substring(0, 100)}
üîó ${update.url}

/last ${update.repoKey} ${update.branch} 5
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    `;
  }
};