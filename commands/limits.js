const { apiRateLimit } = require('../service/github');
const { sendMessage } = require('../utils/message');
const { log, logError } = require('../utils/logger');

module.exports = async (ctx) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–º–∏—Ç–∞—Ö
        if (!apiRateLimit || typeof apiRateLimit.remaining === 'undefined') {
            throw new Error('–î–∞–Ω–Ω—ã–µ –æ –ª–∏–º–∏—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        }

        // –†–∞—Å—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–±—Ä–æ—Å–∞
        const resetTime = new Date(apiRateLimit.reset * 1000);
        const timeLeftMinutes = Math.max(0, (apiRateLimit.reset * 1000 - Date.now()) / 60000);

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞
        const limitTotal = apiRateLimit.limit || 60;
        const remaining = apiRateLimit.remaining || 0;
        const used = limitTotal - remaining;

        const message = `
üìä *–õ–∏–º–∏—Ç—ã GitHub API*:

‚ñ∏ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${used}/${limitTotal}
‚ñ∏ –û—Å—Ç–∞–ª–æ—Å—å: ${remaining}
‚ñ∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: ${timeLeftMinutes.toFixed(1)} –º–∏–Ω—É—Ç
‚ñ∏ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${resetTime.toLocaleTimeString('ru-RU')}

‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å.
–î–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GitHub Personal Token.
`;

        await sendMessage(ctx, message, { 
            parse_mode: 'MarkdownV2',
            disable_web_page_preview: true
        });

        log(`–ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –ª–∏–º–∏—Ç—ã API. –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: ${remaining}`, 'info');

    } catch (error) {
        logError(error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤ API');
        await sendMessage(
            ctx,
            `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
            { parse_mode: 'MarkdownV2' }
        );
    }
};