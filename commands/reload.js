const { sendMessage } = require('../utils/message');
const config = require('../config');
const fs = require('fs');
const path = require('path');

let botInstance = null;

function setBotInstance(bot) {
    botInstance = bot;
}

async function reloadCommand(commandName) {
    try {
        const fullPath = path.join(__dirname, '..', 'commands', `${commandName}.js`);
        
        if (!fs.existsSync(fullPath)) {
            return { success: false, error: 'File not found' };
        }

        delete require.cache[require.resolve(fullPath)];
        
        const newCommand = require(fullPath);
        
        const commandHandler = botInstance?.command?.handlers?.find(
            h => h.toString().includes(commandName)
        );
        
        if (commandHandler) {
            const index = botInstance.command.handlers.indexOf(commandHandler);
            if (index > -1) {
                botInstance.command.handlers.splice(index, 1);
            }
        }
        
        botInstance.command(commandName, newCommand);
        
        return { success: true };
        
    } catch (error) {
        return { success: false, error: error.message };
    }
}

module.exports = async (ctx) => {
    try {
        const args = ctx.message.text.split(' ').slice(1);

        if (ctx.from.id !== config.ADMIN_USER_ID) {
            return await sendMessage(ctx, '‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', { parse_mode: 'HTML' });
        }

        if (!args.length) {
            const commands = fs.readdirSync(path.join(__dirname, '..', 'commands'))
                .filter(f => f.endsWith('.js') && f !== 'reload.js')
                .map(f => f.replace('.js', ''));
            
            return await sendMessage(
                ctx,
                `<b>üîÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞</b>\n\n` +
                `<i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</i>\n` +
                commands.map(c => `<code>${c}</code>`).join(', ') +
                `\n\n<code>all</code> - –í—Å–µ –∫–æ–º–∞–Ω–¥—ã`,
                { parse_mode: 'HTML' }
            );
        }

        const target = args[0].toLowerCase();
        
        if (target === 'all') {
            const { exec } = require('child_process');
            const { promisify } = require('util');
            const execAsync = promisify(exec);
            
            await execAsync('pm2 reload bot --silent', { timeout: 10000 });
            
            await sendMessage(
                ctx,
                '<b>‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ PM2</b>\n\n' +
                '–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                { parse_mode: 'HTML' }
            );
            
        } else {
            await sendMessage(
                ctx,
                '<b>‚ö†Ô∏è –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥</b>\n\n' +
                '–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –∫–æ–º–∞–Ω–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n' +
                '‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <code>/reload all</code> (PM2 reload)\n' +
                '‚Ä¢ –ò–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é\n\n' +
                '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ª–µ—Ç—É —Å–ª–æ–∂–Ω–∞ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Node.js',
                { parse_mode: 'HTML' }
            );
        }

    } catch (error) {
        await sendMessage(
            ctx,
            `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
            { parse_mode: 'HTML' }
        );
    }
};

module.exports.setBotInstance = setBotInstance;