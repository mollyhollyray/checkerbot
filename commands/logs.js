const { sendMessage, sendLongMessage } = require('../utils/message');
const config = require('../config');
const fs = require('fs');
const { promisify } = require('util');
const readFile = promisify(fs.readFile);

module.exports = async (ctx) => {
    try {
        const args = ctx.message.text.split(' ').slice(1);
        const lines = parseInt(args[0]) || 20;

        if (ctx.from.id !== config.ADMIN_USER_ID) {
            return await sendMessage(
                ctx,
                '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                { parse_mode: 'HTML' }
            );
        }

        if (lines > 100) {
            return await sendMessage(
                ctx,
                '‚ùå –ú–∞–∫—Å–∏–º—É–º 100 —Å—Ç—Ä–æ–∫',
                { parse_mode: 'HTML' }
            );
        }

        await ctx.replyWithChatAction('typing');

        // –ß–∏—Ç–∞–µ–º –ª–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞
        let logContent;
        try {
            logContent = await readFile(config.LOG_FILE, 'utf8');
        } catch (error) {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º pm2 logs
            const { exec } = require('child_process');
            const { promisify } = require('util');
            const execAsync = promisify(exec);
            
            const result = await execAsync(`pm2 logs bot --lines ${lines} --silent`, { 
                timeout: 10000 
            });
            logContent = result.stdout || result.stderr;
        }

        if (!logContent || logContent.trim() === '') {
            return await sendMessage(
                ctx,
                'üì≠ –õ–æ–≥–∏ –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                { parse_mode: 'HTML' }
            );
        }

        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
        const logLines = logContent.split('\n');
        const lastLines = logLines.slice(-lines).join('\n');
        
        const truncatedOutput = lastLines.length > 3500 
            ? lastLines.substring(0, 3500) + '...\n\n‚ö†Ô∏è –õ–æ–≥–∏ –æ–±—Ä–µ–∑–∞–Ω—ã' 
            : lastLines;

        await sendLongMessage(
            ctx,
            `<b>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤</b>\n\n` +
            `<pre>${truncatedOutput}</pre>`,
            { 
                parse_mode: 'HTML',
                disable_web_page_preview: true
            }
        );

    } catch (error) {
        await sendMessage(
            ctx,
            `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤\n\n` +
            `<code>${error.message}</code>`,
            { parse_mode: 'HTML' }
        );
    }
};