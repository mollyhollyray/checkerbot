const { fetchAllReleases, fetchLatestRelease } = require('../service/github');
const { sendMessage, sendLongMessage, escapeHtml } = require('../utils/message');
const logger = require('../utils/logger');
const storage = require('../service/storage');

function isValidRepoFormat(repoInput) {
    return repoInput && repoInput.includes('/') && repoInput.split('/').length === 2;
}

function sanitizeRepoInput(repoInput) {
    return repoInput.replace(/[^a-zA-Z0-9_\-\.\/]/g, '').toLowerCase();
}

module.exports = async (ctx) => {
    try {
        let args;
        if (ctx.message && ctx.message.text) {
            args = ctx.message.text.split(' ').filter(arg => arg.trim());
        } else if (ctx.callbackQuery && ctx.callbackQuery.data) {
            args = ctx.callbackQuery.data.split(' ').filter(arg => arg.trim());
        } else {
            return await sendMessage(ctx, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã', { parse_mode: 'HTML' });
        }

        if (args.length < 2 || !isValidRepoFormat(args[1])) {
            return await sendMessage(
                ctx,
                '<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n' +
                '<i>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</i> <code>/releases owner/repo [limit=10]</code>\n\n' +
                '<i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n' +
                '<code>/releases facebook/react</code>\n' +
                '<code>/releases vuejs/core 5</code>',
                { parse_mode: 'HTML' }
            );
        }

        const sanitizedInput = sanitizeRepoInput(args[1]);
        const [owner, repo] = sanitizedInput.split('/');
        const repoKey = `${owner}/${repo}`;
        
        let limit = 10;
        if (args.length >= 3 && !isNaN(args[2])) {
            limit = Math.min(parseInt(args[2]), 20);
        }

        await ctx.replyWithChatAction('typing');

        const releases = await fetchAllReleases(owner, repo, limit);
        
        if (!releases || releases.length === 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ–≥–∏
            const latestRelease = await fetchLatestRelease(owner, repo);
            if (!latestRelease) {
                return await sendMessage(
                    ctx,
                    `üì≠ <b>–í ${escapeHtml(repoKey)} –Ω–µ—Ç —Ä–µ–ª–∏–∑–æ–≤</b>\n\n` +
                    `–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–º–µ–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –∏–ª–∏ —Ç–µ–≥–æ–≤.`,
                    { parse_mode: 'HTML' }
                );
            }
            
            releases = [latestRelease];
        }

        const releaseInfo = storage.getRepoReleaseInfo(owner, repo);
        const latestRelease = releases[0];

        let message = `üì¶ <b>–†–µ–ª–∏–∑—ã ${escapeHtml(repoKey)}</b>\n\n`;
        
        if (releaseInfo && releaseInfo.lastReleaseTag) {
            message += `üéØ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–ª–∏–∑:</b> <code>${escapeHtml(releaseInfo.lastReleaseTag)}</code>\n`;
        }
        
        message += `üìä <b>–í—Å–µ–≥–æ —Ä–µ–ª–∏–∑–æ–≤:</b> ${releases.length}\n`;
        message += '‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ\n\n';

        releases.forEach((release, index) => {
            const isLatest = index === 0;
            const date = new Date(release.published_at || release.created_at);
            
            message += `${isLatest ? 'üåü' : 'üìå'} <b>${escapeHtml(release.name || release.tag_name)}</b>\n`;
            message += `üè∑Ô∏è <b>–¢–µ–≥:</b> <code>${escapeHtml(release.tag_name)}</code>\n`;
            message += `üìÖ <b>–î–∞—Ç–∞:</b> ${date.toLocaleString('ru-RU')}\n`;
            message += `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${release.body ? escapeHtml(release.body.substring(0, 100)) + '...' : '–Ω–µ—Ç'}\n`;
            message += `üîó <a href="${release.html_url}">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ª–∏–∑</a>\n\n`;
        });

        message += '‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ\n';
        message += `üí° <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ</i>`;

        await sendLongMessage(ctx, message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });

    } catch (error) {
        logger.error(error, 'Releases command failed');
        await sendMessage(
            ctx,
            `‚ùå –û—à–∏–±–∫–∞: ${escapeHtml(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}`,
            { parse_mode: 'HTML' }
        );
    }
};