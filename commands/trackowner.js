const { fetchUserRepos, fetchOrgRepos, getAccountType, fetchRepoData } = require('../service/github');
const storage = require('../service/storage');
const { sendMessage, escapeHtml } = require('../utils/message');
const logger = require('../utils/logger');
const config = require('../config');

function isValidOwner(owner) {
  return owner && /^[a-zA-Z0-9_-]+$/.test(owner) && owner.length <= 50;
}

async function sendNewRepoNotification(bot, owner, repoName) {
  try {
    if (!bot || !bot.telegram) {
      logger.error('Bot instance not available for sending notification', null, {
        context: 'BOT_INSTANCE_MISSING',
        owner,
        repo: repoName
      });
      return;
    }

    const message = `
üéØ <b>–ù–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞!</b>

üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> <code>${owner}</code>
üì¶ <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:</b> <code>${repoName}</code>
üîó <b>–°—Å—ã–ª–∫–∞:</b> https://github.com/${owner}/${repoName}

üí° <i>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</i>
    `.trim();

    await bot.telegram.sendMessage(
      config.ADMIN_USER_ID,
      message,
      { 
        parse_mode: 'HTML',
        disable_web_page_preview: true
      }
    );

    logger.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${owner}/${repoName}`, 'info', {
      context: 'NEW_REPO_NOTIFICATION',
      owner,
      repo: repoName
    });

  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: ${owner}/${repoName}`, error, {
      context: 'NEW_REPO_NOTIFICATION_ERROR',
      owner,
      repo: repoName,
      hasBot: !!bot,
      hasTelegram: !!(bot && bot.telegram)
    });
  }
}

module.exports = async (ctx) => {
  try {
    const args = ctx.message.text.split(' ').slice(1);
    const owner = args[0];

    if (!owner || !isValidOwner(owner)) {
      return await sendMessage(
        ctx,
        '<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n' +
        '<i>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</i> <code>/trackowner username</code>\n\n' +
        '<i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n' +
        '<code>/trackowner facebook</code>\n' +
        '<code>/trackowner google</code>\n\n' +
        '‚ö†Ô∏è <b>–ë—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞</b>',
        { parse_mode: 'HTML' }
      );
    }

    if (storage.ownerExists(owner)) {
      return await sendMessage(
        ctx,
        `<b>‚ùå –í–ª–∞–¥–µ–ª–µ—Ü <code>${escapeHtml(owner)}</code> —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è</b>\n\n` +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤',
        { parse_mode: 'HTML' }
      );
    }

    await ctx.replyWithChatAction('typing');

    const accountType = await getAccountType(owner);
    let repos = [];

    if (accountType === 'Organization') {
      repos = await fetchOrgRepos(owner, 50);
    } else {
      repos = await fetchUserRepos(owner, 50);
    }

    if (!repos.length) {
      return await sendMessage(
        ctx,
        `<b>‚ùå –£ –≤–ª–∞–¥–µ–ª—å—Ü–∞ <code>${escapeHtml(owner)}</code> –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤</b>`,
        { parse_mode: 'HTML' }
      );
    }

    storage.addOwner(owner);

    let addedCount = 0;
    let skippedCount = 0;
    const addedRepos = [];
    const skippedRepos = [];
    
    logger.log(`–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${repos.length} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞ ${owner}`, 'info', {
      context: 'TRACKOWNER_REPOS_PROCESSING',
      owner,
      totalRepos: repos.length
    });

    for (const repo of repos.slice(0, 30)) {
      const repoKey = `${owner}/${repo.name}`;
      
      const exists = storage.repoExists(owner, repo.name);
      
      if (!exists) {
        try {
          logger.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repoKey}`, 'debug', {
            context: 'PROCESSING_NEW_REPO',
            owner,
            repo: repo.name
          });

          const repoData = await fetchRepoData(owner, repo.name);
          
          storage.addRepoFromOwner(owner, repo.name, {
            lastCommitSha: repoData.lastCommitSha,
            lastCommitTime: repoData.lastCommitTime,
            defaultBranch: repoData.defaultBranch,
            isEmpty: repoData.isEmpty || false
          });
          
          addedCount++;
          addedRepos.push({
            name: repo.name,
            defaultBranch: repoData.defaultBranch,
            lastCommit: repoData.lastCommitSha ? `${repoData.lastCommitSha.slice(0, 7)}` : '–Ω–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤',
            isEmpty: repoData.isEmpty || false
          });

          const statusEmoji = repoData.isEmpty ? 'üì≠' : '‚úÖ';
          logger.log(`${statusEmoji} –î–æ–±–∞–≤–ª–µ–Ω ${repoData.isEmpty ? '–ø—É—Å—Ç–æ–π ' : ''}—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞: ${repoKey}`, 'info', {
            context: 'NEW_REPO_ADDED',
            owner,
            repo: repo.name,
            repoKey,
            defaultBranch: repoData.defaultBranch,
            firstCommit: repoData.lastCommitSha ? repoData.lastCommitSha.slice(0, 7) : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            isEmpty: repoData.isEmpty,
            addTime: new Date().toLocaleString('ru-RU')
          });

          if (!repoData.isEmpty) {
            const botInstance = ctx.bot || global.botInstance;
            if (botInstance) {
              await sendNewRepoNotification(botInstance, owner, repo.name);
            } else {
              logger.warn('Bot instance not available for notification', {
                context: 'NO_BOT_INSTANCE',
                owner,
                repo: repo.name
              });
            }
          }

        } catch (repoError) {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ${repoKey}`, repoError, {
            context: 'NEW_REPO_ERROR',
            owner,
            repo: repo.name,
            errorType: repoError.response?.status ? 'API_ERROR' : 'NETWORK_ERROR',
            statusCode: repoError.response?.status,
            timestamp: new Date().toLocaleString('ru-RU')
          });
        }
      } else {
        skippedCount++;
        skippedRepos.push(repo.name);
        logger.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repoKey}`, 'debug', {
          context: 'SKIP_EXISTING_REPO',
          owner,
          repo: repo.name
        });
      }
    }

    storage.updateOwnerReposCount(owner, addedCount);

    logger.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ ${owner} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`, 'info', {
      context: 'TRACKOWNER_COMPLETE',
      owner,
      accountType,
      addedCount,
      skippedCount,
      totalRepos: repos.length,
      addedRepos: addedRepos.map(r => ({
        name: r.name,
        isEmpty: r.isEmpty
      })),
      skippedRepos: skippedRepos,
      timestamp: new Date().toLocaleString('ru-RU')
    });

    let userMessage = `<b>‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</b>\n\n` +
      `<b>‚ñ∏ –ò–º—è:</b> <code>${escapeHtml(owner)}</code>\n` +
      `<b>‚ñ∏ –¢–∏–ø:</b> ${accountType}\n` +
      `<b>‚ñ∏ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:</b> ${addedCount}\n` +
      `<b>‚ñ∏ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è):</b> ${skippedCount}\n` +
      `<b>‚ñ∏ –í—Å–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:</b> ${repos.length}\n\n`;

    if (addedCount > 0) {
      userMessage += `<b>üì¶ –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:</b>\n`;
      addedRepos.forEach(repo => {
        const emoji = repo.isEmpty ? 'üì≠' : '‚úÖ';
        userMessage += `${emoji} <code>${repo.name}</code>\n`;
      });
      userMessage += `\n`;
    }

    userMessage += `<i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏</i>`;

    await sendMessage(ctx, userMessage, { parse_mode: 'HTML' });

  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /trackowner –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: ${args?.[0] || 'unknown'}`, error, {
      context: 'TRACKOWNER_COMMAND_ERROR',
      owner: args?.[0] || 'unknown',
      errorType: error.response?.status ? 'API_ERROR' : 'NETWORK_ERROR',
      statusCode: error.response?.status,
      timestamp: new Date().toLocaleString('ru-RU')
    });
    
    let errorMessage = '<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞</b>';
    if (error.response?.status === 404) {
      errorMessage += '\n\n–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
    } else {
      errorMessage += `\n\n<code>${escapeHtml(error.message)}</code>`;
    }

    await sendMessage(ctx, errorMessage, { parse_mode: 'HTML' });
  }
};