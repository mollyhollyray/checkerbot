const storage = require('../service/storage');
const { sendMessage, escapeHtml } = require('../utils/message');
const { log } = require('../utils/logger');

module.exports = async (ctx) => {
  try {
    const args = ctx.message.text.split(' ').slice(1);
    const owner = args[0];

    if (!owner) {
      return await sendMessage(
        ctx,
        '<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n' +
        '<i>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</i> <code>/untrackowner username</code>\n\n' +
        '<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/untrackowner facebook</code>',
        { parse_mode: 'HTML' }
      );
    }

    if (!storage.ownerExists(owner)) {
      return await sendMessage(
        ctx,
        `<b>‚ùå –í–ª–∞–¥–µ–ª–µ—Ü <code>${escapeHtml(owner)}</code> –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è</b>`,
        { parse_mode: 'HTML' }
      );
    }

    storage.removeOwner(owner);
    const repos = storage.getReposByOwner(owner);
    
    for (const [repoKey, repoData] of repos) {
      if (!repoData.trackedIndividually) {
        const [repoOwner, repoName] = repoKey.split('/');
        storage.removeRepo(repoOwner, repoName);
      }
    }

    await sendMessage(
      ctx,
      `<b>‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b>\n\n` +
      `<code>${escapeHtml(owner)}</code>\n` +
      `–£–¥–∞–ª–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: ${repos.length}\n` +
      `üïí ${new Date().toLocaleString('ru-RU')}`,
      { parse_mode: 'HTML' }
    );

  } catch (error) {
    log(error, 'Untrackowner command failed');
    await sendMessage(
      ctx,
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞',
      { parse_mode: 'HTML' }
    );
  }
};