const { sendMessage } = require('../utils/message');
const { log, logError } = require('../utils/logger');
const config = require('../config');

const COMMAND_HELP = {
  main: `🌸 <b>GitHub Tracker Bot</b> 🌸 <i>Help Center</i>

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📚 <b>Основные команды управления:</b>
┌───────────────────────────────
│  🔹 /add - Добавить репозиторий
│  🔹 /remove - Удалить репозиторий  
│  🔹 /list - Список отслеживаемых
│  🔹 /check - Проверить обновления
└───────────────────────────────

👥 <b>Авто-отслеживание владельцев:</b>
┌───────────────────────────────
│  👤 /trackowner - Добавить владельца
│  🚫 /untrackowner - Удалить владельца
│  📊 /ownerstats - Статистика владельцев
└───────────────────────────────

🔍 <b>Просмотр данных GitHub:</b>
┌───────────────────────────────
│  🌿 /branches - Ветки репозитория
│  📝 /last - Последние коммиты
│  🔄 /pr - Pull Requests
│  👁️ /prview - Детали PR
│  📦 /releases - Релизы
└───────────────────────────────

⚙️ <b>Системные команды:</b>
┌───────────────────────────────
│  📊 /limits - Лимиты GitHub API
│  🔧 /pm2 - Управление процессами
│  🔄 /reload - Перезагрузка команд
│  📋 /logs - Логи бота
│  ❓ /help - Эта справка
└───────────────────────────────

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💡 <i>Для деталей по команде:</i> <code>/help [команда]</code>
📖 <i>Пример:</i> <code>/help add</code>`,

  add: `✨ <b>Команда /add</b> ✨
━━━━━━━━━━━━━━━━━━
Добавляет репозиторий для отслеживания

📌 <b>Формат:</b>
<code>/add owner/repo</code>

📌 <b>Примеры:</b>
<code>/add facebook/react</code>
<code>/add axios/axios main</code>

📌 <b>Особенности:</b>
• Автоматически определяет ветку по умолчанию
• Проверяет доступность репозитория
• Сохраняет последний коммит
• Максимум ${config.MAX_REPOS} репозиториев

⚠️ <b>Только для администратора</b>`,

  remove: `✨ <b>Команда /remove</b> ✨
━━━━━━━━━━━━━━━━━━
Удаляет репозиторий из отслеживания

📌 <b>Формат:</b>
<code>/remove owner/repo</code>

📌 <b>Пример:</b>
<code>/remove facebook/react</code>

⚠️ <b>Требует подтверждения</b>
🗑️ <b>Удаляет все данные отслеживания</b>

⚠️ <b>Только для администратора</b>`,

  list: `✨ <b>Команда /list</b> ✨
━━━━━━━━━━━━━━━━━━
Показывает все отслеживаемые репозитории

📌 <b>Формат:</b>
<code>/list</code> - Первая страница
<code>/list 2</code> - Вторая страница

📌 <b>Отображает:</b>
• 🔸 Отдельные репозитории
• 🔹 Авто-отслеживаемые (через владельцев)
• 🌿 Ветку по умолчанию
• 🆔 Последний коммит
• 📅 Дату добавления
• ⏱ Активность

📌 <b>Особенности:</b>
• Пагинация при большом количестве
• Группировка по владельцам
• Быстрый доступ к командам
• Детальная статистика`,

  check: `✨ <b>Команда /check</b> ✨
━━━━━━━━━━━━━━━━━━
Ручная проверка обновлений

📌 <b>Формат:</b>
<code>/check</code>

📌 <b>Проверяет:</b>
• Новые коммиты во всех ветках
• Новые релизы
• Активность репозиториев

📌 <b>Особенности:</b>
• Работает параллельно с авто-проверкой
• Показывает детальную статистику
• Отправляет уведомления об обновлениях

⏰ <b>Авто-проверка:</b> каждые ${config.CHECK_INTERVAL_MINUTES} минут

⚠️ <b>Только для администратора</b>`,

  branches: `✨ <b>Команда /branches</b> ✨
━━━━━━━━━━━━━━━━━━
Показывает ветки репозитория

📌 <b>Формат:</b>
<code>/branches owner/repo [limit=15]</code>

📌 <b>Примеры:</b>
<code>/branches facebook/react</code>
<code>/branches vuejs/core 25</code>

📌 <b>Отображает:</b>
• 👑 Ветку по умолчанию
• 📅 Дата последнего коммита
• 🆔 Хеш коммита
• 🔗 Ссылку на коммит
• 🟢🟡🔴 Статус активности

📌 <b>Лимит:</b> до 50 веток`,

  last: `✨ <b>Команда /last</b> ✨
━━━━━━━━━━━━━━━━━━
Показывает последние коммиты

📌 <b>Формат:</b>
<code>/last owner/repo [branch] [count=5] [page=1]</code>

📌 <b>Примеры:</b>
<code>/last facebook/react</code>
<code>/last vuejs/core next 10</code>
<code>/last axios/axios main 5 2</code>

📌 <b>Отображает:</b>
• # Номер коммита
• 🆔 Хеш коммита
• 👤 Автора
• 🕒 Дату
• 📝 Сообщение
• 🔗 Ссылку

📌 <b>Лимит:</b> до 20 коммитов`,

  pr: `✨ <b>Команда /pr</b> ✨
━━━━━━━━━━━━━━━━━━
Показывает Pull Requests

📌 <b>Формат:</b>
<code>/pr owner/repo [state=open] [limit=5] [filters]</code>

📌 <b>Примеры:</b>
<code>/pr facebook/react</code>
<code>/pr vuejs/core closed 10</code>
<code>/pr webpack/webpack label:bug author:john</code>

📌 <b>Фильтры:</b>
• <code>state</code>: open|closed|all
• <code>label:метка</code> - фильтр по метке
• <code>author:автор</code> - фильтр по автору

📌 <b>Отображает:</b>
• 🟢🟣🔴 Статус PR
• 👤 Автора
• 📅 Дата обновления
• 🏷️ Метки
• 🔗 Ссылки

📌 <b>Лимит:</b> до 15 PR`,

  prview: `✨ <b>Команда /prview</b> ✨
━━━━━━━━━━━━━━━━━━
Детальная информация о PR

📌 <b>Формат:</b>
<code>/prview owner/repo pr_number</code>

📌 <b>Пример:</b>
<code>/prview facebook/react 123</code>

📌 <b>Отображает:</b>
• 📌 Заголовок и номер PR
• 🟢🟣🔴 Статус (Open/Merged/Closed)
• 👤 Автора и назначенных
• 📅 Даты создания и обновления
• 🌿 Ветки (from → to)
• 📊 Статистику (коммиты, изменения)
• ✅ Проверки CI
• 🏷️ Метки
• 📝 Описание
• 📂 Ссылку на изменения

🔍 <b>Полная детализация Pull Request</b>`,

  releases: `✨ <b>Команда /releases</b> ✨
━━━━━━━━━━━━━━━━━━
Показывает релизы репозитория

📌 <b>Формат:</b>
<code>/releases owner/repo [limit=10]</code>

📌 <b>Примеры:</b>
<code>/releases facebook/react</code>
<code>/releases vuejs/core 5</code>

📌 <b>Отображает:</b>
• 🌟 Последние релизы
• 🏷️ Теги версий
• 📅 Даты публикации
• 📝 Описания
• 🔗 Ссылки на GitHub

📌 <b>Особенности:</b>
• Автоматическое отслеживание новых релизов
• Работает с GitHub Releases и тегами
• Уведомления в реальном времени
• Лимит: до 20 релизов

🔔 <b>Авто-уведомления включены</b>`,

  trackowner: `✨ <b>Команда /trackowner</b> ✨
━━━━━━━━━━━━━━━━━━
Добавляет владельца для автоматического отслеживания

📌 <b>Формат:</b>
<code>/trackowner username</code>

📌 <b>Примеры:</b>
<code>/trackowner facebook</code>
<code>/trackowner google</code>

📌 <b>Что делает:</b>
• Автоматически добавляет все текущие репозитории
• Отслеживает новые репозитории владельца
• Работает для пользователей и организаций
• Ограничение: 30 репозиториев за раз

📌 <b>Особенности:</b>
• Определяет тип аккаунта (User/Organization)
• Пропускает уже отслеживаемые репозитории
• Отправляет уведомления о новых репозиториях
• Обрабатывает пустые репозитории

🔔 <b>Авто-отслеживание новых репозиториев</b>

⚠️ <b>Только для администратора</b>`,

  untrackowner: `✨ <b>Команда /untrackowner</b> ✨
━━━━━━━━━━━━━━━━━━
Удаляет владельца из автоматического отслеживания

📌 <b>Формат:</b>
<code>/untrackowner username</code>

📌 <b>Пример:</b>
<code>/untrackowner facebook</code>

📌 <b>Что делает:</b>
• Удаляет владельца из списка отслеживания
• Удаляет все авто-добавленные репозитории
• Сохраняет индивидуально отслеживаемые репозитории

⚠️ <b>Внимание:</b>
Удаляет все репозитории, добавленные через авто-отслеживание

⚠️ <b>Только для администратора</b>`,

  ownerstats: `✨ <b>Команда /ownerstats</b> ✨
━━━━━━━━━━━━━━━━━━
Показывает статистику по отслеживаемым владельцам

📌 <b>Формат:</b>
<code>/ownerstats</code>

📌 <b>Отображает:</b>
• 👤 Имена владельцев
• 📦 Количество репозиториев
• ✅ Активные репозитории
• 📅 Даты добавления
• 🔍 Даты последней проверки
• 🔗 Ссылки для управления

📌 <b>Отличие от /list:</b>
• /list - все репозитории с группировкой
• /ownerstats - только статистика по владельцам`,

  limits: `✨ <b>Команда /limits</b> ✨
━━━━━━━━━━━━━━━━━━
Показывает лимиты GitHub API

📌 <b>Формат:</b>
<code>/limits</code>

📌 <b>Отображает:</b>
• 📊 Использованные запросы
• 🎯 Оставшиеся запросы
• ⏰ Время до сброса
• 📈 Прогресс-бар использования
• 🔄 Полное время обновления

💡 <b>Советы:</b>
• Для увеличения лимитов добавьте GITHUB_TOKEN
• Критичные запросы: не более 5/мин
• Авто-проверка учитывает лимиты`,

  pm2: `✨ <b>Команда /pm2</b> ✨
━━━━━━━━━━━━━━━━━━
Управление процессами PM2

📌 <b>Формат:</b>
<code>/pm2 [command]</code>

📌 <b>Команды:</b>
• <code>restart</code> - Перезапустить бота
• <code>reload</code> - Graceful reload
• <code>stop</code> - Остановить бота  
• <code>start</code> - Запустить бота
• <code>status</code> - Статус процессов
• <code>logs</code> - Показать логи
• <code>update</code> - Обновить и перезапустить

⚡ <b>Полное управление процессами</b>

⚠️ <b>Только для администратора</b>`,

  reload: `✨ <b>Команда /reload</b> ✨
━━━━━━━━━━━━━━━━━━
Горячая перезагрузка команд

📌 <b>Формат:</b>
<code>/reload [commandName]</code>

📌 <b>Команды:</b>
• <code>add</code> - Перезагрузить команду add
• <code>branches</code> - Перезагрузить команду branches
• <code>all</code> - Все команды (через PM2)
• <code>list</code> - Список загруженных

📌 <b>Особенности:</b>
• Перезагружает команды без перезапуска бота
• Работает в реальном времени
• Сохраняет состояние бота
• Для полной перезагрузки использует PM2

🔧 <b>Разработка и отладка</b>

⚠️ <b>Только для администратора</b>`,

  logs: `✨ <b>Команда /logs</b> ✨
━━━━━━━━━━━━━━━━━━
Показывает последние строки логов

📌 <b>Формат:</b>
<code>/logs [lines=20]</code>

📌 <b>Примеры:</b>
<code>/logs</code> - 20 последних строк
<code>/logs 50</code> - 50 последних строк

📌 <b>Особенности:</b>
• Читает из файла логов (быстрее)
• Максимум 100 строк
• Автоматическое переключение на PM2 если файла нет
• Форматированный вывод с временными метками

🔍 <b>Отладка и мониторинг</b>

⚠️ <b>Только для администратора</b>`

};

module.exports = async (ctx) => {
  const [_, command] = ctx.message.text.split(' ')
  
  if (ctx.from.id !== config.ADMIN_USER_ID) {
    return await sendMessage(
      ctx,
      '❌ Эта команда доступна только администратору',
      { parse_mode: 'HTML' }
    );
  }
  
  try {
    const helpText = command 
      ? COMMAND_HELP[command.toLowerCase()] || COMMAND_HELP.main
      : COMMAND_HELP.main;

    const buttons = [
      [
        { text: "📋 Список", callback_data: "help_list" },
        { text: "🔄 Проверить", callback_data: "help_check" },
        { text: "🌿 Ветки", callback_data: "help_branches" }
      ],
      [
        { text: "👥 Владельцы", callback_data: "help_trackowner" },
        { text: "📊 Лимиты", callback_data: "help_limits" },
        { text: "🔧 Система", callback_data: "help_pm2" }
      ],
      [
        { text: "🔄 PR", callback_data: "help_pr" },
        { text: "📦 Релизы", callback_data: "help_releases" },
        { text: "📝 Коммиты", callback_data: "help_last" }
      ]
    ];

    await sendMessage(ctx, helpText, { 
      parse_mode: 'HTML',
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: buttons
      }
    });
    
    log(`Help delivered for: ${command || 'main'}`);
  } catch (error) {
    logError(error, 'Help command failed');
    await sendMessage(ctx, 
      '⚠️ <b>Произошла ошибка при показе справки</b>\n\nПопробуйте еще раз',
      { parse_mode: 'HTML' }
    );
  }
};