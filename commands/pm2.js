const { exec } = require('child_process');
const { sendMessage, sendLongMessage } = require('../utils/message');
const config = require('../config');
const { promisify } = require('util');

const execAsync = promisify(exec);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ PM2 —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π "—É—Å–ø–µ—à–Ω—ã—Ö –æ—à–∏–±–æ–∫"
async function executePM2Command(command, timeout = 15000) {
    try {
        const result = await execAsync(command, { timeout });
        return { success: true, output: result.stdout || result.stderr };
    } catch (error) {
        // PM2 —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ PM2 being PM2
        if (error.stdout && error.stdout.includes('restarting') ||
            error.stdout && error.stdout.includes('reloaded') ||
            error.stdout && error.stdout.includes('stopped') ||
            error.stdout && error.stdout.includes('started')) {
            return { success: true, output: error.stdout || error.stderr };
        }
        return { success: false, output: error.stderr || error.stdout || error.message };
    }
}

module.exports = async (ctx) => {
    try {
        const args = ctx.message.text.split(' ').slice(1);
        const command = args[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
        if (ctx.from.id !== config.ADMIN_USER_ID) {
            return await sendMessage(
                ctx,
                '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                { parse_mode: 'HTML' }
            );
        }

        if (!command) {
            return await sendMessage(
                ctx,
                '<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PM2</b>\n\n' +
                '<i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</i>\n' +
                '<code>/pm2 restart</code> - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ–≥–æ –±–æ—Ç–∞\n' +
                '<code>/pm2 reload</code> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ downtime\n' +
                '<code>/pm2 stop</code> - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n' +
                '<code>/pm2 start</code> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n' +
                '<code>/pm2 status</code> - –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n' +
                '<code>/pm2 logs</code> - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (10 —Å—Ç—Ä–æ–∫)\n' +
                '<code>/pm2 update</code> - –û–±–Ω–æ–≤–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å',
                { parse_mode: 'HTML' }
            );
        }

        await ctx.replyWithChatAction('typing');

        let result;
        switch (command) {
            case 'restart':
                result = await executePM2Command('pm2 restart bot --silent');
                break;
            case 'reload':
                result = await executePM2Command('pm2 reload bot --silent');
                break;
            case 'stop':
                result = await executePM2Command('pm2 stop bot --silent');
                break;
            case 'start':
                result = await executePM2Command('pm2 start bot --silent');
                break;
            case 'status':
                result = await executePM2Command('pm2 status --silent', 10000);
                break;
            case 'logs':
                result = await executePM2Command('pm2 logs bot --lines 10 --silent', 10000);
                break;
            case 'update':
                result = await executePM2Command('git pull && pm2 restart bot --silent', 30000);
                break;
            default:
                return await sendMessage(
                    ctx,
                    '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ PM2',
                    { parse_mode: 'HTML' }
                );
        }

        if (!result.success) {
            throw new Error(result.output);
        }

        const output = result.output;
        
        if (!output || output.trim() === '') {
            return await sendMessage(
                ctx,
                `<b>‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${command}</b>\n\n` +
                `–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω`,
                { parse_mode: 'HTML' }
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è PM2
        let message;
        if (output.includes('restarting') || output.includes('reloaded')) {
            message = `<b>‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω</b>\n\n` +
                     `–ö–æ–º–∞–Ω–¥–∞: <code>${command}</code>\n` +
                     `üïí ${new Date().toLocaleString('ru-RU')}`;
        } else if (output.includes('stopped')) {
            message = `<b>‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n` +
                     `–ö–æ–º–∞–Ω–¥–∞: <code>${command}</code>`;
        } else if (output.includes('started')) {
            message = `<b>‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>\n\n` +
                     `–ö–æ–º–∞–Ω–¥–∞: <code>${command}</code>`;
        } else {
            const truncatedOutput = output.length > 2000 
                ? output.substring(0, 2000) + '...\n\n‚ö†Ô∏è –í—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω' 
                : output;

            message = `<b>‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${command}</b>\n\n` +
                     `<pre>${truncatedOutput}</pre>`;
        }

        await sendMessage(
            ctx,
            message,
            { 
                parse_mode: 'HTML',
                disable_web_page_preview: true
            }
        );

    } catch (error) {
        let errorMessage = `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã PM2\n\n`;
        
        if (error.message.includes('Timeout')) {
            errorMessage += `<code>–¢–∞–π–º–∞—É—Ç: –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ</code>\n\n`;
            errorMessage += `–ù–æ –ø—Ä–æ—Ü–µ—Å—Å –º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ`;
        } else if (error.message.includes('Command failed')) {
            errorMessage += `<code>–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è</code>\n\n`;
            errorMessage += `PM2 —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏`;
        } else if (error.message.includes('ENOENT')) {
            errorMessage += `<code>PM2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</code>`;
        } else {
            errorMessage += `<code>${error.message}</code>`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è restart
        if (command === 'restart') {
            errorMessage += `\n\nüí° <i>–ù–æ –±–æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ</i>`;
        }

        await sendMessage(
            ctx,
            errorMessage,
            { parse_mode: 'HTML' }
        );
    }
};