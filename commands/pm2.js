const { exec } = require('child_process');
const { sendMessage } = require('../utils/message');
const config = require('../config');
const { promisify } = require('util');

const execAsync = promisify(exec);

module.exports = async (ctx) => {
    try {
        const args = ctx.message.text.split(' ').slice(1);
        const command = args[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
        if (ctx.from.id !== config.ADMIN_USER_ID) {
            return await sendMessage(
                ctx,
                '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                { parse_mode: 'HTML' }
            );
        }

        if (!command) {
            return await sendMessage(
                ctx,
                '<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PM2</b>\n\n' +
                '<i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</i>\n' +
                '<code>/pm2 restart</code> - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ–≥–æ –±–æ—Ç–∞\n' +
                '<code>/pm2 reload</code> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ downtime\n' +
                '<code>/pm2 stop</code> - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n' +
                '<code>/pm2 start</code> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n' +
                '<code>/pm2 status</code> - –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n' +
                '<code>/pm2 logs</code> - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏\n' +
                '<code>/pm2 update</code> - –û–±–Ω–æ–≤–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å',
                { parse_mode: 'HTML' }
            );
        }

        await ctx.replyWithChatAction('typing');

        let result;
        switch (command) {
            case 'restart':
                result = await execAsync('pm2 restart bot');
                break;
            case 'reload':
                result = await execAsync('pm2 reload bot');
                break;
            case 'stop':
                result = await execAsync('pm2 stop bot');
                break;
            case 'start':
                result = await execAsync('pm2 start bot');
                break;
            case 'status':
                result = await execAsync('pm2 status');
                break;
            case 'logs':
                result = await execAsync('pm2 logs bot --lines 20');
                break;
            case 'update':
                result = await execAsync('git pull && pm2 restart bot');
                break;
            default:
                return await sendMessage(
                    ctx,
                    '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ PM2',
                    { parse_mode: 'HTML' }
                );
        }

        // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –≤—ã–≤–æ–¥
        const output = result.stdout || result.stderr;
        const truncatedOutput = output.length > 2000 
            ? output.substring(0, 2000) + '...' 
            : output;

        await sendMessage(
            ctx,
            `<b>‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${command}</b>\n\n` +
            `<pre>${truncatedOutput}</pre>`,
            { parse_mode: 'HTML' }
        );

    } catch (error) {
        await sendMessage(
            ctx,
            `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã PM2\n\n` +
            `<code>${error.message}</code>`,
            { parse_mode: 'HTML' }
        );
    }
};