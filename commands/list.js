const storage = require('../service/storage');
const { sendMessage, sendLongMessage } = require('../utils/message');
const { log, logError } = require('../utils/logger');

module.exports = async (ctx) => {
  try {
    const repos = storage.getRepos();
    
    if (repos.length === 0) {
      return await sendMessage(
        ctx,
        '<b>üì≠ –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø—É—Å—Ç</b>\n\n' +
        '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–∞–Ω–¥–æ–π:\n' +
        '<code>/add –≤–ª–∞–¥–µ–ª–µ—Ü/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</code>',
        { parse_mode: 'HTML' }
      );
    }

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    const reposByOwner = {};
    repos.forEach(([key, data]) => {
      const [owner, repo] = key.split('/');
      if (!reposByOwner[owner]) reposByOwner[owner] = [];
      reposByOwner[owner].push({
        repo,
        fullName: `${owner}/${repo}`,
        branch: data.defaultBranch || 'main',
        lastCommitSha: data.lastCommitSha,
        addedAt: data.addedAt
      });
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
    let message = `
<b>‚ú® –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
<b>üìä –í—Å–µ–≥–æ:</b> <u>${repos.length}</u> ${getRepoWord(repos.length)}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n
`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
    Object.entries(reposByOwner).forEach(([owner, items]) => {
      message += `<b>üåê ${escapeHtml(owner)}</b>\n`;
      
      items.forEach((item, index) => {
        const isLast = index === items.length - 1;
        message += `
${index === 0 ? '‚îè' : '‚î£'} <b>üîπ ${escapeHtml(item.repo)}</b>
${isLast ? '‚îó' : '‚îÉ'} üåø –í–µ—Ç–∫–∞: <code>${escapeHtml(item.branch)}</code>
${isLast ? ' ' : '‚îÉ'} üÜî –ö–æ–º–º–∏—Ç: <code>${item.lastCommitSha?.slice(0, 7) || 'unknown'}</code>
${isLast ? ' ' : '‚îÉ'} üìÖ –î–æ–±–∞–≤–ª–µ–Ω: <i>${formatDate(item.addedAt)}</i>
${isLast ? '' : '‚îÉ'}

<code># ${escapeHtml(item.fullName)}</code>
<code>/branch ${escapeHtml(item.fullName)} ${escapeHtml(item.branch)}</code>\n\n`;
      });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    message += `
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
<b>üí° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
<code>/add –≤–ª–∞–¥–µ–ª–µ—Ü/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</code> - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
<code>/remove –≤–ª–∞–¥–µ–ª–µ—Ü/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</code> - —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
<code>/check –≤—Å–µ</code> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`;

    await sendLongMessage(ctx, message, { 
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });

    log(`Listed ${repos.length} repositories`, 'info');
  } catch (error) {
    logError(error, 'List command failed');
    await sendMessage(
      ctx,
      '<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤</b>\n' +
      `<code>${escapeHtml(error.message)}</code>`,
      { parse_mode: 'HTML' }
    );
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
function getRepoWord(count) {
  const cases = [2, 0, 1, 1, 1, 2];
  const words = ['—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤'];
  return words[
    count % 100 > 4 && count % 100 < 20 ? 2 : cases[Math.min(count % 10, 5)]
  ];
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
function escapeHtml(text) {
  if (!text) return '';
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(isoString) {
  try {
    const date = new Date(isoString);
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      hour: '2-digit',
      minute: '2-digit'
    });
  } catch {
    return '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞';
  }
}