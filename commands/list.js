const storage = require('../service/storage');
const { sendMessage, escapeMarkdown } = require('../utils/message');
const { log } = require('../utils/logger');

module.exports = async (ctx) => {
  try {
    const repos = storage.getRepos();
    
    if (repos.length === 0) {
      return sendMessage(
        ctx,
        'üì≠ –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø—É—Å—Ç\n\n' +
        '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–∞–Ω–¥–æ–π:\n' +
        '`/add –≤–ª–∞–¥–µ–ª–µ—Ü/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π`',
        { parse_mode: 'MarkdownV2' }
      );
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    const reposByOwner = {};
    repos.forEach(([key, data]) => {
      const [owner, repo] = key.split('/');
      if (!reposByOwner[owner]) reposByOwner[owner] = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ç–∫–∏
      reposByOwner[owner].push({ 
        repo,
        branch: data.defaultBranch || 'main', // –§–æ–ª–±—ç–∫ –∑–Ω–∞—á–µ–Ω–∏–µ
        ...data 
      });
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = '‚ú® *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏* ‚ú®\n\n';
    
    Object.entries(reposByOwner).forEach(([owner, items]) => {
      message += `üåê *${escapeMarkdown(owner)}*\n`;
      
      items.forEach(item => {
        message += `‚îå üîπ *${escapeMarkdown(item.repo)}*\n`;
        message += `‚îú üåø –í–µ—Ç–∫–∞: \`${item.branch}\`\n`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
        message += `‚îú üÜî –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: \`${item.lastCommitSha?.slice(0, 7) || 'unknown'}\`\n`;
        message += `‚îî üìÖ –î–æ–±–∞–≤–ª–µ–Ω: ${formatDate(item.addedAt)}\n\n`;
      });
    });

    await sendMessage(ctx, message, { parse_mode: 'MarkdownV2' });
    log(`Listed ${repos.length} repositories`, 'info');
  } catch (error) {
    logError(error, 'List command failed');
    await sendMessage(ctx, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤');
  }
};

function formatDate(isoString) {
  try {
    const date = new Date(isoString);
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  } catch {
    return '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞';
  }
}