const storage = require('../service/storage');
const { sendMessage, sendLongMessage } = require('../utils/message');
const logger = require('../utils/logger');

const REPOS_PER_PAGE = 10;
const MAX_MESSAGE_LENGTH = 3500;

function formatDate(isoString) {
    try {
        const date = new Date(isoString);
        return date.toLocaleDateString('ru-RU');
    } catch {
        return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
}

function getRepoWord(count) {
    const words = ['—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤'];
    return words[
        count % 100 > 4 && count % 100 < 20 ? 2 : [2, 0, 1, 1, 1, 2][Math.min(count % 10, 5)]
    ];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function formatTimeAgo(timestamp) {
    if (!timestamp) return '–Ω–∏–∫–æ–≥–¥–∞';
    
    const diffMs = Date.now() - timestamp;
    const diffSeconds = Math.floor(diffMs / 1000);
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffWeeks = Math.floor(diffDays / 7);
    const diffMonths = Math.floor(diffDays / 30);
    
    if (diffMonths > 0) {
        return `${diffMonths} –º–µ—Å. –Ω–∞–∑–∞–¥`;
    } else if (diffWeeks > 0) {
        return `${diffWeeks} –Ω–µ–¥. –Ω–∞–∑–∞–¥`;
    } else if (diffDays > 0) {
        return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
    } else if (diffHours > 0) {
        return `${diffHours} —á–∞—Å. –Ω–∞–∑–∞–¥`;
    } else if (diffMinutes > 0) {
        return `${diffMinutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    } else if (diffSeconds > 0) {
        return `${diffSeconds} —Å–µ–∫. –Ω–∞–∑–∞–¥`;
    } else {
        return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    }
}

module.exports = async (ctx) => {
    try {
        const args = ctx.message.text.split(' ').slice(1);
        const mode = args[0] || 'main';
        const param = args[1];
        const page = parseInt(param) || 1;

        await ctx.replyWithChatAction('typing');
        
        const allRepos = storage.getRepos();
        const trackedOwners = storage.getTrackedOwners();
        
        if (allRepos.length === 0) {
            return await sendMessage(
                ctx,
                'üì≠ –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤\n\n' +
                '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π: /add owner/repo',
                { parse_mode: 'HTML' }
            );
        }

        const messageId = ctx.message?.message_id;

        switch (mode) {
            case 'owner':
                if (!param) {
                    return await showOwnerSelection(ctx, allRepos, trackedOwners, messageId);
                }
                return await showOwnerRepos(ctx, param, page, messageId);
                
            case 'stats':
                return await showStats(ctx, allRepos, trackedOwners, messageId);
                
            default:
                return await showMainList(ctx, allRepos, trackedOwners, page, messageId);
        }

    } catch (error) {
        logger.error('List command failed:', error);
        await sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞', { parse_mode: 'HTML' });
    }
};

// –ì–ª–∞–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫
async function showMainList(ctx, allRepos, trackedOwners, page, editMessageId = null) {
    const totalPages = Math.ceil(allRepos.length / REPOS_PER_PAGE);
    const currentPage = Math.max(1, Math.min(page, totalPages));
    const startIdx = (currentPage - 1) * REPOS_PER_PAGE;
    const endIdx = startIdx + REPOS_PER_PAGE;
    
    const reposToShow = allRepos.slice(startIdx, endIdx);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –Ω–∞—á–∞–ª–µ
    const individualRepos = allRepos.filter(([_, repo]) => repo.trackedIndividually);
    const autoRepos = allRepos.filter(([_, repo]) => !repo.trackedIndividually);

    let message = 'üìÇ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏</b>\n';
    message += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
    message += `üìä –í—Å–µ–≥–æ: ${allRepos.length} ${getRepoWord(allRepos.length)}\n`;
    message += `üë• –í–ª–∞–¥–µ–ª—å—Ü–µ–≤: ${trackedOwners.length}\n`;
    message += `üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    message += `üî∏ –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: ${individualRepos.length}\n`;
    message += `üîπ –ê–≤—Ç–æ-–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: ${autoRepos.length}\n`;
    message += `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${currentPage}/${totalPages}\n`;
    message += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';

    reposToShow.forEach(([repoKey, repoData]) => {
        const [owner, repo] = repoKey.split('/');
        
        const emoji = repoData.trackedIndividually ? 'üî∏' : 'üîπ';
        
        message += `${emoji} <b>${owner}/</b><code>${repo}</code>\n`;
        message += `   üåø –í–µ—Ç–∫–∞: ${repoData.branch}\n`;
        message += `   üÜî –ö–æ–º–º–∏—Ç: ${repoData.lastCommitSha?.slice(0, 7) || '----'}\n`;
        message += `   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: ${formatDate(repoData.addedAt)}\n`;
        message += `   ‚è± –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${formatTimeAgo(repoData.lastCommitTime)}\n\n`;
        
        message += `   /last ${repoKey} ${repoData.branch} 3\n`;
        message += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
    });

    const keyboard = [];
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    if (totalPages > 1) {
        const navRow = [];
        if (currentPage > 1) {
            navRow.push({
                text: "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data: `list_main_${currentPage - 1}`
            });
        }
        navRow.push({
            text: `${currentPage}/${totalPages}`,
            callback_data: 'list_current'
        });
        if (currentPage < totalPages) {
            navRow.push({
                text: "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
                callback_data: `list_main_${currentPage + 1}`
            });
        }
        keyboard.push(navRow);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.push([
        { text: "üë• –ü–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º", callback_data: "list_owner_view" },
        { text: "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "list_stats" }
    ]);

    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if (editMessageId && ctx.callbackQuery) {
        try {
            await ctx.editMessageText(message, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: { inline_keyboard: keyboard }
            });
            await ctx.answerCbQuery();
        } catch (error) {
            await sendMessage(ctx, message, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: { inline_keyboard: keyboard }
            });
        }
    } else {
        await sendMessage(ctx, message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: { inline_keyboard: keyboard }
        });
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞
async function showOwnerRepos(ctx, owner, page, editMessageId = null) {
    const ownerRepos = storage.getReposByOwner(owner);
    const allRepos = storage.getRepos().filter(([key]) => key.startsWith(owner + '/'));
    
    const totalPages = Math.ceil(ownerRepos.length / REPOS_PER_PAGE);
    const currentPage = Math.max(1, Math.min(page, totalPages));
    const startIdx = (currentPage - 1) * REPOS_PER_PAGE;
    const endIdx = startIdx + REPOS_PER_PAGE;

    const reposToShow = allRepos.slice(startIdx, endIdx);

    let message = `üë§ <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ ${owner}</b>\n`;
    message += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
    message += `üì¶ –í—Å–µ–≥–æ: ${ownerRepos.length} ${getRepoWord(ownerRepos.length)}\n`;
    message += `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${currentPage}/${totalPages}\n`;
    message += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';

    reposToShow.forEach(([repoKey, repoData]) => {
        const [_, repo] = repoKey.split('/');
        
        message += `üì¶ <b>${repo}</b>\n`;
        message += `   üåø –í–µ—Ç–∫–∞: ${repoData.branch}\n`;
        message += `   üÜî –ö–æ–º–º–∏—Ç: ${repoData.lastCommitSha?.slice(0, 7) || '----'}\n`;
        message += `   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: ${formatDate(repoData.addedAt)}\n`;
        message += `   ‚è± –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${formatTimeAgo(repoData.lastCommitTime)}\n\n`;
        
        message += `   /last ${repoKey} ${repoData.branch} 3\n`;
        message += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
    });

    const keyboard = [];
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    if (totalPages > 1) {
        const navRow = [];
        if (currentPage > 1) {
            navRow.push({
                text: "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data: `list_owner_${owner}_${currentPage - 1}`
            });
        }
        navRow.push({
            text: `${currentPage}/${totalPages}`,
            callback_data: 'list_current'
        });
        if (currentPage < totalPages) {
            navRow.push({
                text: "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
                callback_data: `list_owner_${owner}_${currentPage + 1}`
            });
        }
        keyboard.push(navRow);
    }

    // –í–æ–∑–≤—Ä–∞—Ç
    keyboard.push([
        { text: "‚Ü©Ô∏è –ö –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É", callback_data: "list_main_1" }
    ]);

    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if (editMessageId && ctx.callbackQuery) {
        try {
            await ctx.editMessageText(message, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: { inline_keyboard: keyboard }
            });
            await ctx.answerCbQuery();
        } catch (error) {
            await sendMessage(ctx, message, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: { inline_keyboard: keyboard }
            });
        }
    } else {
        await sendMessage(ctx, message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: { inline_keyboard: keyboard }
        });
    }
}

// –í—ã–±–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞
async function showOwnerSelection(ctx, allRepos, trackedOwners, editMessageId = null) {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    const owners = {};
    allRepos.forEach(([key, data]) => {
        const [owner] = key.split('/');
        if (!owners[owner]) owners[owner] = 0;
        owners[owner]++;
    });

    let message = 'üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞</b>\n';
    message += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';

    Object.keys(owners).sort().forEach(owner => {
        message += `üîπ <b>${owner}</b> - ${owners[owner]} ${getRepoWord(owners[owner])}\n`;
    });

    const keyboard = [];
    const ownerKeys = Object.keys(owners).sort();
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    for (let i = 0; i < ownerKeys.length; i += 2) {
        const row = [];
        if (ownerKeys[i]) {
            row.push({
                text: ownerKeys[i],
                callback_data: `list_owner_${ownerKeys[i]}_1`
            });
        }
        if (ownerKeys[i + 1]) {
            row.push({
                text: ownerKeys[i + 1],
                callback_data: `list_owner_${ownerKeys[i + 1]}_1`
            });
        }
        keyboard.push(row);
    }

    keyboard.push([
        { text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "list_main_1" }
    ]);

    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if (editMessageId && ctx.callbackQuery) {
        try {
            await ctx.editMessageText(message, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: { inline_keyboard: keyboard }
            });
            await ctx.answerCbQuery();
        } catch (error) {
            await sendMessage(ctx, message, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: { inline_keyboard: keyboard }
            });
        }
    } else {
        await sendMessage(ctx, message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: { inline_keyboard: keyboard }
        });
    }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async function showStats(ctx, allRepos, trackedOwners, editMessageId = null) {
    const individualRepos = allRepos.filter(([_, repo]) => repo.trackedIndividually);
    const autoRepos = allRepos.filter(([_, repo]) => !repo.trackedIndividually);
    
    const now = Date.now();
    const activeRepos = allRepos.filter(([_, repo]) => {
        if (!repo.lastCommitTime) return false;
        const diffDays = (now - repo.lastCommitTime) / (1000 * 60 * 60 * 24);
        return diffDays <= 7;
    }).length;

    const recentRepos = allRepos.filter(([_, repo]) => {
        if (!repo.lastCommitTime) return false;
        const diffDays = (now - repo.lastCommitTime) / (1000 * 60 * 60 * 24);
        return diffDays <= 30;
    }).length;

    const inactiveRepos = allRepos.length - recentRepos;

    let message = 'üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b>\n';
    message += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
    message += `üì¶ –í—Å–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: ${allRepos.length}\n`;
    message += `üî∏ –û—Ç–¥–µ–ª—å–Ω—ã–µ: ${individualRepos.length}\n`;
    message += `üîπ –ê–≤—Ç–æ-–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: ${autoRepos.length}\n`;
    message += `üë• –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: ${trackedOwners.length}\n\n`;

    // –¢–æ–ø –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    const owners = {};
    allRepos.forEach(([key]) => {
        const [owner] = key.split('/');
        if (!owners[owner]) owners[owner] = 0;
        owners[owner]++;
    });

    const topOwners = Object.entries(owners)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 8);

    message += 'üèÜ <b>–¢–æ–ø –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:</b>\n';
    topOwners.forEach(([owner, count], index) => {
        const medal = index < 3 ? ['ü•á', 'ü•à', 'ü•â'][index] : `${index + 1}.`;
        message += `${medal} ${owner} - ${count} ${getRepoWord(count)}\n`;
    });

    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    message += '\n‚ö° <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:</b>\n';
    message += `üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ (<7 –¥–Ω.): ${activeRepos}\n`;
    message += `üü° –ù–µ–¥–∞–≤–Ω–∏–µ (<30 –¥–Ω.): ${recentRepos - activeRepos}\n`;
    message += `üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (>30 –¥–Ω.): ${inactiveRepos}\n`;
    message += `üìà –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${Math.round((recentRepos / allRepos.length) * 100)}%\n`;

    const keyboard = [[
        { text: "‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É", callback_data: "list_main_1" },
        { text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data: "list_stats" }
    ]];

    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if (editMessageId && ctx.callbackQuery) {
        try {
            await ctx.editMessageText(message, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: { inline_keyboard: keyboard }
            });
            await ctx.answerCbQuery();
        } catch (error) {
            await sendMessage(ctx, message, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                reply_markup: { inline_keyboard: keyboard }
            });
        }
    } else {
        await sendMessage(ctx, message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: { inline_keyboard: keyboard }
        });
    }
}