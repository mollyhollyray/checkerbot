const axios = require('axios');
const { sendMessage, sendLongMessage, escapeMarkdown } = require('../utils/message');
const { log, logError } = require('../utils/logger');
const config = require('../config');
const NodeCache = require('node-cache');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ —Å TTL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
const prCache = new NodeCache({ stdTTL: 300 });

module.exports = async (ctx) => {
    const args = ctx.message.text.split(' ').filter(arg => arg.trim());
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    if (args.length < 2) {
        return sendMessage(
            ctx,
            '‚ùå *–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã*\n\n' +
            '‚ñ∏ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/pr –≤–ª–∞–¥–µ–ª–µ—Ü/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π [—Å–æ—Å—Ç–æ—è–Ω–∏–µ=open] [–ª–∏–º–∏—Ç=5] [label:–º–µ—Ç–∫–∞]`\n' +
            '‚ñ∏ *–°–æ—Å—Ç–æ—è–Ω–∏—è:* `open` (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), `closed`, `all`\n' +
            '‚ñ∏ *–õ–∏–º–∏—Ç:* –º–∞–∫—Å–∏–º—É–º 15 PR (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)\n' +
            '‚ñ∏ *–ü—Ä–∏–º–µ—Ä—ã:*\n' +
            '   `/pr facebook/react`\n' +
            '   `/pr vuejs/core closed 10`\n' +
            '   `/pr axios/axios all 5 label:bug`',
            { parse_mode: 'MarkdownV2' }
        );
    }

    const [owner, repo] = args[1].includes('/') 
        ? args[1].split('/') 
        : [args[1], '']; // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞

    if (!owner || !repo) {
        return sendMessage(
            ctx,
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–≤–ª–∞–¥–µ–ª–µ—Ü/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π`',
            { parse_mode: 'MarkdownV2' }
        );
    }

    const repoKey = `${owner}/${repo}`.toLowerCase();
    let state = 'open';
    let limit = 5;
    let label = null;

    // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args.slice(2).forEach(arg => {
        if (['open', 'closed', 'all'].includes(arg)) {
            state = arg;
        } else if (/^\d+$/.test(arg)) {
            limit = Math.min(parseInt(arg), 15);
        } else if (arg.startsWith('label:')) {
            label = arg.substring(6).trim();
        }
    });

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        const cacheKey = `${repoKey}-${state}-${label || 'no-label'}`;
        const cachedPRs = prCache.get(cacheKey);
        
        let pullRequests = cachedPRs;
        if (!cachedPRs) {
            log(`–ó–∞–ø—Ä–æ—Å PR –¥–ª—è ${cacheKey}`, 'info');
            
            const params = {
                state,
                per_page: limit,
                sort: 'updated',
                direction: 'desc'
            };
            if (label) params.labels = label;

            const response = await axios.get(
                `https://api.github.com/repos/${owner}/${repo}/pulls`,
                {
                    params,
                    headers: {
                        'Authorization': `token ${config.GITHUB_TOKEN}`,
                        'User-Agent': 'GitHub-Tracker-Bot',
                        'Accept': 'application/vnd.github.v3+json'
                    }
                }
            );

            pullRequests = response.data;
            prCache.set(cacheKey, pullRequests);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (!pullRequests?.length) {
            const message = label
                ? `üîç –í *${escapeMarkdown(repoKey)}* –Ω–µ—Ç PR (${state}, –º–µ—Ç–∫–∞ \`${escapeMarkdown(label)}\`)`
                : `üîç –í *${escapeMarkdown(repoKey)}* –Ω–µ—Ç PR —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º \`${state}\``;
            
            return sendMessage(ctx, message, { parse_mode: 'MarkdownV2' });
        }

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        let message = `üìå *Pull Requests –≤ ${escapeMarkdown(repoKey)}*\n` +
                     `‚î£ *–§–∏–ª—å—Ç—Ä—ã:* \`${state}\`${label ? ` + \`${escapeMarkdown(label)}\`` : ''}\n` +
                     `‚îó *–ù–∞–π–¥–µ–Ω–æ:* ${pullRequests.length}\n\n`;

        pullRequests.forEach(pr => {
            const emoji = pr.state === 'open' ? 'üü¢' : pr.merged ? 'üü£' : 'üî¥';
            const status = pr.state === 'open' ? 'Open' : pr.merged ? 'Merged' : 'Closed';
            const labels = pr.labels.map(l => `\`${escapeMarkdown(l.name)}\``).join(', ');
            
            message += `${emoji} *PR #${pr.number}: ${escapeMarkdown(pr.title)}*\n` +
                       `‚î£ *–ê–≤—Ç–æ—Ä:* [${escapeMarkdown(pr.user.login)}](${pr.user.html_url})\n` +
                       `‚î£ *–°–æ—Å—Ç–æ—è–Ω–∏–µ:* ${status}\n` +
                       `‚î£ *–û–±–Ω–æ–≤–ª—ë–Ω:* ${new Date(pr.updated_at).toLocaleString('ru-RU')}\n` +
                       `${labels ? `‚î£ *–ú–µ—Ç–∫–∏:* ${labels}\n` : ''}` +
                       `‚îó [–°—Å—ã–ª–∫–∞](${pr.html_url})\n\n`;
        });

        message += `‚ÑπÔ∏è –î–ª—è –¥–µ—Ç–∞–ª–µ–π: \`/prview ${escapeMarkdown(repoKey)} <–Ω–æ–º–µ—Ä PR>\``;

        await sendLongMessage(ctx, message, { parse_mode: 'MarkdownV2' });

    } catch (error) {
        logError(error, `PR Error: ${repoKey}`);
        
        let errorMsg = '‚ùå –û—à–∏–±–∫–∞: ';
        if (error.response?.status === 404) {
            errorMsg += `–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π \`${repoKey}\` –Ω–µ –Ω–∞–π–¥–µ–Ω`;
        } else if (error.response?.status === 403) {
            errorMsg += '–õ–∏–º–∏—Ç GitHub API –∏—Å—á–µ—Ä–ø–∞–Ω';
        } else {
            errorMsg += error.response?.data?.message || error.message;
        }

        await sendMessage(ctx, errorMsg, { parse_mode: 'MarkdownV2' });
    }
};