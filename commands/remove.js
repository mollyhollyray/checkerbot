const { log, logError } = require('../utils/logger');
const { sendMessage } = require('../utils/message');
const storage = require('../service/storage'); // –¢–æ–ª—å–∫–æ storage

module.exports = async (ctx) => {
  try {
    const args = ctx.message.text.split(' ').slice(1);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    if (args.length < 1 || !args[0].includes('/')) {
      return await sendMessage(
        ctx,
        '<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n' +
        '<i>–§–æ—Ä–º–∞—Ç:</i> <code>/remove &lt;–≤–ª–∞–¥–µ–ª–µ—Ü/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π&gt;</code>\n\n' +
        '<i>–ü—Ä–∏–º–µ—Ä:</i>\n' +
        '<code>/remove facebook/react</code>',
        { parse_mode: 'HTML' }
      );
    }

    const [owner, repo] = args[0].split('/');
    const repoKey = `${owner}/${repo}`.toLowerCase();

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if (storage.removeRepo(owner, repo)) {
      await sendMessage(
        ctx,
        `‚úÖ <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!</b>\n\n` +
        `üìÇ <code>${escapeHtml(repoKey)}</code>\n` +
        `üïí ${formatDate(new Date())}\n\n` +
        `–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: <code>/add ${escapeHtml(repoKey)}</code>`,
        { parse_mode: 'HTML' }
      );
      log(`Repo removed: ${repoKey}`, 'success');
    } else {
      await sendMessage(
        ctx,
        `‚ÑπÔ∏è <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö</b>\n\n` +
        `<code>${escapeHtml(repoKey)}</code>\n\n` +
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫: /list`,
        { parse_mode: 'HTML' }
      );
    }

  } catch (error) {
    logError(error, 'Remove command failed');
    await sendMessage(
      ctx,
      '‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏</b>\n\n' +
      `<code>${escapeHtml(error.message)}</code>`,
      { parse_mode: 'HTML' }
    );
  }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(date) {
  return date.toLocaleString('ru-RU', { 
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
  if (!text) return '';
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}