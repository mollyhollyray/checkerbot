const checker = require('../service/checker');
const { sendMessage, sendLongMessage } = require('../utils/message');
const logger = require('../utils/logger');
const storage = require('../service/storage');

module.exports = async (ctx) => {
  try {
    await ctx.replyWithChatAction('typing');
    const startTime = Date.now();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const reposBeforeCheck = storage.getRepos().map(([repo, data]) => ({
      repo,
      lastSha: data.lastCommitSha
    }));

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    const updates = await checker.checkAllRepos(ctx.bot);
    const duration = ((Date.now() - startTime) / 1000).toFixed(2);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    let message = `üîÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b> (${duration} —Å–µ–∫)\n\n`;
    
    if (updates.length > 0) {
      message += `‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:</b> ${updates.length}\n\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é
      updates.forEach(update => {
        const repoData = reposBeforeCheck.find(r => r.repo === update.repoKey);
        message += 
`üìå <b>${escapeHtml(update.repoKey)}</b> (${escapeHtml(update.branch)})
‚îú üîÑ –ë—ã–ª–æ: <code>${repoData?.lastSha?.substring(0, 7) || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</code>
‚îú üÜï –°—Ç–∞–ª–æ: <code>${update.newCommitSha.substring(0, 7)}</code>
‚îú üë§ –ê–≤—Ç–æ—Ä: ${escapeHtml(update.commitAuthor)}
‚îú üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${escapeHtml(update.commitMessage.split('\n')[0])}
‚îî üîó <a href="${update.commitUrl}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n\n`;
      });
    } else {
      message += '‚ÑπÔ∏è –í—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    message += '\n<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:</b>\n';
    storage.getRepos().forEach(([repo, data]) => {
      message += `‚ñ∏ ${escapeHtml(repo)} (${escapeHtml(data.branch)})\n`;
    });

    await sendLongMessage(ctx, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });

  } catch (error) {
    logger.error(error, '–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
    await sendMessage(
      ctx,
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ\n' +
      `<code>${escapeHtml(error.message)}</code>`,
      { parse_mode: 'HTML' }
    );
  }
};

function escapeHtml(text) {
  if (!text) return '';
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
}