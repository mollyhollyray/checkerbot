const checker = require('../service/checker');
const { sendMessage, sendLongMessage } = require('../utils/message');
const logger = require('../utils/logger');
const config = require('../config');
const storage = require('../service/storage');

module.exports = async (ctx) => {
    try {
        const args = ctx.message.text.split(' ').slice(1);

        if (ctx.from.id !== config.ADMIN_USER_ID) {
                    return await sendMessage(
                        ctx,
                        '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                        { parse_mode: 'HTML' }
                    );
                }
        
        if (args.length > 0 && args[0] !== '–≤—Å–µ' && args[0] !== 'all') {
            return await sendMessage(
                ctx,
                '<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç</b>\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/check</code> –∏–ª–∏ <code>/check –≤—Å–µ</code>',
                { parse_mode: 'HTML' }
            );
        }

        await ctx.replyWithChatAction('typing');
        
        const reposCount = storage.getRepos().length;
        if (reposCount === 0) {
            return await sendMessage(
                ctx,
                'üì≠ –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n' +
                '–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /add',
                { parse_mode: 'HTML' }
            );
        }

        await sendMessage(ctx, `üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${reposCount} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...`);

        const startTime = Date.now();
        const updates = await checker.checkAllRepos(ctx.bot);
        const duration = ((Date.now() - startTime) / 1000).toFixed(2);

        if (updates.length === 0) {
            return await sendMessage(
                ctx,
                `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration} —Å–µ–∫.\n` +
                '–í—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
            );
        }

        let message = `üîÑ <b>–ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b> (${duration} —Å–µ–∫)\n\n`;
        
        updates.forEach(update => {
            message += 
`üìå <b>${update.repoKey}</b> (${update.branch})
‚îú üÜï –ö–æ–º–º–∏—Ç: <code>${update.newSha.slice(0, 7)}</code>
‚îú üìù ${update.message.split('\n')[0].substring(0, 50)}...
‚îî üîó <a href="${update.url}">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–º–∏—Ç</a>\n\n`;
        });

        message += '<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:</b>\n';
        storage.getRepos().forEach(([repo, data]) => {
            message += `‚ñ∏ ${repo} (${data.branch || 'main'})\n`;
        });

        await sendLongMessage(ctx, message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });

    } catch (error) {
        logger.error(error, 'Check command failed');
        await sendMessage(
            ctx,
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤\n' +
            `<code>${error.message}</code>`,
            { parse_mode: 'HTML' }
        );
    }
};