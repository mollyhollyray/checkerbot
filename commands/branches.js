const { fetchRepoBranches, getBranchLastCommit, getDefaultBranch } = require('../service/github');
const { sendMessage, escapeMarkdown } = require('../utils/message');
const { log, logError } = require('../utils/logger');

module.exports = async (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    
    if (!args[0]?.includes('/')) {
        return sendMessage(
            ctx,
            '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/branches –≤–ª–∞–¥–µ–ª–µ—Ü/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π`\n' +
            '–ü—Ä–∏–º–µ—Ä: `/branches facebook/react`',
            { parse_mode: 'MarkdownV2' }
        );
    }

    const [owner, repo] = args[0].split('/');
    const repoName = `${owner}/${repo}`;

    try {
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤–µ—Ç–∫–∏ –∏ –≤–µ—Ç–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const [branches, defaultBranch] = await Promise.all([
            fetchRepoBranches(owner, repo),
            getDefaultBranch(owner, repo)
        ]);

        if (!branches?.length) {
            return sendMessage(
                ctx,
                `üåø *${escapeMarkdown(repoName)}*\n\n` +
                '–í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–µ—Ç–æ–∫',
                { parse_mode: 'MarkdownV2' }
            );
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ç–∫–∏
        const branchesWithStatus = await getBranchesStatus(owner, repo, branches);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = `üå≥ *–í–µ—Ç–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ${escapeMarkdown(repoName)}* üå≥\n\n`;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –≤–µ—Ç–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∑–∞—Ç–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        branchesWithStatus.sort((a, b) => {
            if (a.name === defaultBranch) return -1;
            if (b.name === defaultBranch) return 1;
            return new Date(b.lastCommit) - new Date(a.lastCommit);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ç–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        branchesWithStatus.forEach(branch => {
            const isDefault = branch.name === defaultBranch;
            const statusEmoji = getBranchEmoji(branch.lastCommit);
            
            message += `${isDefault ? 'üëë' : '‚îî'} *${escapeMarkdown(branch.name)}* ` +
                      `${isDefault ? '(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)' : ''}\n` +
                      `   ${statusEmoji} –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: ${formatDate(branch.lastCommit)}\n` +
                      `   üÜî ${branch.lastCommitSha?.slice(0, 7) || 'unknown'}\n\n`;
        });

        message += `üìä –í—Å–µ–≥–æ –≤–µ—Ç–æ–∫: *${branches.length}*\n\n` +
                  `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–º–∏—Ç–æ–≤: \`/last ${escapeMarkdown(repoName)} [–≤–µ—Ç–∫–∞]\``;

        await sendMessage(ctx, message, { 
            parse_mode: 'MarkdownV2',
            disable_web_page_preview: true
        });

    } catch (error) {
        logError(error, `Branches command failed: ${repoName}`);
        await handleBranchError(ctx, error, repoName);
    }
};

// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ç–æ–∫
async function getBranchesStatus(owner, repo, branches) {
    const requests = branches.map(async branch => {
        const commit = await getBranchLastCommit(owner, repo, branch);
        return {
            name: branch,
            lastCommit: commit?.commit?.author?.date,
            lastCommitSha: commit?.sha
        };
    });
    
    return Promise.all(requests);
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º emoji-—Å—Ç–∞—Ç—É—Å –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
function getBranchEmoji(lastCommitDate) {
    if (!lastCommitDate) return 'üî¥';
    
    const daysDiff = (Date.now() - new Date(lastCommitDate)) / (1000 * 60 * 60 * 24);
    
    if (daysDiff < 7) return 'üü¢';  // –ê–∫—Ç–∏–≤–Ω–∞—è (–º–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏)
    if (daysDiff < 30) return 'üü°'; // –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    return 'üî¥';                   // –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    if (!dateString) return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async function handleBranchError(ctx, error, repoName) {
    let errorMessage;
    
    if (error.response?.status === 404) {
        errorMessage = `‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π \`${repoName}\` –Ω–µ –Ω–∞–π–¥–µ–Ω`;
    } else if (error.message.includes('API rate limit')) {
        errorMessage = '‚ö†Ô∏è –õ–∏–º–∏—Ç GitHub API –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
    } else {
        errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
    }

    await sendMessage(ctx, errorMessage, { 
        parse_mode: 'MarkdownV2',
        disable_web_page_preview: true
    });
}