const { fetchRepoBranches, getBranchLastCommit, getDefaultBranch, getTotalBranchesCount, checkBranchExists } = require('../service/github');
const { sendMessage, sendLongMessage, escapeHtml } = require('../utils/message');
const logger = require('../utils/logger');
const storage = require('../service/storage');
const config = require('../config');
const NodeCache = require('node-cache');

const branchesCache = new NodeCache({ stdTTL: 300 });
const DEFAULT_BRANCHES_LIMIT = 15;
const MAX_BRANCHES_LIMIT = 50;

function isValidRepoFormat(repoInput) {
    return repoInput && 
           repoInput.includes('/') && 
           repoInput.split('/').length === 2 &&
           repoInput.split('/')[0].length > 0 &&
           repoInput.split('/')[1].length > 0;
}

function sanitizeRepoInput(repoInput) {
    return repoInput.replace(/[^a-zA-Z0-9_\-\.\/]/g, '').toLowerCase();
}

function validateLimit(limit) {
    const num = parseInt(limit);
    return !isNaN(num) && num > 0 && num <= MAX_BRANCHES_LIMIT ? num : DEFAULT_BRANCHES_LIMIT;
}

module.exports = async (ctx) => {
    try {
        // –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ message, —Ç–∞–∫ –∏ callback
        let args;
        if (ctx.message && ctx.message.text) {
            args = ctx.message.text.split(' ').filter(arg => arg.trim());
        } else if (ctx.callbackQuery && ctx.callbackQuery.data) {
            args = ctx.callbackQuery.data.split(' ').filter(arg => arg.trim());
        } else {
            return await sendMessage(ctx, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã', { parse_mode: 'HTML' });
        }

        console.log('Command context:', {
            text: ctx.message?.text,
            callback: ctx.callbackQuery?.data,
            args: args
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if (args.length < 2 || !args[1].includes('/')) {
            const defaultRepo = storage.getFirstRepo();
            if (!defaultRepo) {
                await sendMessage(
                    ctx,
                    '<b>‚ùå –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤</b>\n\n' +
                    '–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–∞–Ω–¥–æ–π /add',
                    { parse_mode: 'HTML' }
                );
                if (ctx.callbackQuery) await ctx.answerCbQuery();
                return;
            }
            // –î–æ–±–∞–≤–ª—è–µ–º defaultRepo –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç
            args[1] = defaultRepo;
        }

        const sanitizedInput = sanitizeRepoInput(args[1]);
        const [owner, repo] = sanitizedInput.split('/');
        const repoName = `${owner}/${repo}`;
        
        let limit = DEFAULT_BRANCHES_LIMIT;

        if (args.length >= 3) {
            limit = validateLimit(args[2]);
        }

        if (!storage.repoExists(owner, repo)) {
            await sendMessage(
                ctx,
                `<b>‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π <code>${escapeHtml(repoName)}</code> –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è</b>\n\n` +
                '–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /add',
                { parse_mode: 'HTML' }
            );
            if (ctx.callbackQuery) await ctx.answerCbQuery();
            return;
        }

        await ctx.replyWithChatAction('typing');

        const cacheKey = `${repoName}-branches-${limit}`;
        const cached = branchesCache.get(cacheKey);
        if (cached) {
            await sendMessage(ctx, cached, { parse_mode: 'HTML' });
            if (ctx.callbackQuery) await ctx.answerCbQuery();
            return;
        }

        const [totalBranches, branches, defaultBranch] = await Promise.all([
            getTotalBranchesCount(owner, repo),
            fetchRepoBranches(owner, repo, limit),
            getDefaultBranch(owner, repo)
        ]);

        if (!branches?.length) {
            const msg = `üåø <b>${escapeHtml(repoName)}</b>\n\n–í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–µ—Ç–æ–∫`;
            await sendMessage(ctx, msg, { parse_mode: 'HTML' });
            if (ctx.callbackQuery) await ctx.answerCbQuery();
            return;
        }

        const branchesWithStatus = await Promise.all(
            branches.map(async branch => {
                const commit = await getBranchLastCommit(owner, repo, branch);
                return {
                    name: branch,
                    lastCommit: commit?.commit?.author?.date,
                    lastCommitSha: commit?.sha,
                    commitUrl: commit?.html_url || ''
                };
            })
        );
        
        branchesWithStatus.sort((a, b) => {
            if (a.name === defaultBranch) return -1;
            if (b.name === defaultBranch) return 1;
            return new Date(b.lastCommit) - new Date(a.lastCommit);
        });

        let message = `üå≥ <b>${escapeHtml(repoName)}</b> üå≥\n` +
                     `üìä <b>–í—Å–µ–≥–æ –≤–µ—Ç–æ–∫:</b> ${totalBranches} (–ø–æ–∫–∞–∑–∞–Ω–æ ${branches.length})\n` +
                     '‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ\n\n';

        branchesWithStatus.forEach(branch => {
            const isDefault = branch.name === defaultBranch;
            const statusEmoji = getBranchEmoji(branch.lastCommit);
            const shortSha = branch.lastCommitSha?.slice(0, 7) || 'unknown';
            const date = branch.lastCommit ? formatDate(branch.lastCommit) : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            
            message += `${isDefault ? 'üëë' : '‚ñ∏'} <b>${escapeHtml(branch.name)}</b> ` +
                      (isDefault ? '(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)' : '') + '\n' +
                      `   ${statusEmoji} –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: ${date}\n` +
                      `   üÜî ${shortSha} <a href="${branch.commitUrl}">–°—Å—ã–ª–∫–∞</a>\n\n`;
        });

        message += '‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ\n' +
                  `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–º–∏—Ç–æ–≤: /last ${escapeHtml(repoName)} [–≤–µ—Ç–∫–∞]\n` +
                  `–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –≤–µ—Ç–æ–∫: /branches ${escapeHtml(repoName)} [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]`;

        branchesCache.set(cacheKey, message);
        await sendLongMessage(ctx, message, { 
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });

        if (ctx.callbackQuery) await ctx.answerCbQuery();

    } catch (error) {
        logger.logError(error, `Branches command failed: ${error.message}`);
        
        const errorMsg = error.response?.status === 404
            ? '–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω'
            : error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        
        await sendMessage(
            ctx,
            `‚ùå –û—à–∏–±–∫–∞: ${escapeHtml(errorMsg)}`,
            { parse_mode: 'HTML' }
        );
        
        if (ctx.callbackQuery) await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
    }
};

function getBranchEmoji(lastCommitDate) {
    if (!lastCommitDate) return 'üî¥';
    const daysDiff = (Date.now() - new Date(lastCommitDate)) / (1000 * 60 * 60 * 24);
    if (daysDiff < 7) return 'üü¢';
    if (daysDiff < 30) return 'üü°';
    return 'üî¥';
}

function formatDate(dateString) {
    if (!dateString) return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
    });
}