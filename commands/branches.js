const { fetchRepoBranches, getBranchLastCommit, getDefaultBranch, getTotalBranchesCount } = require('../service/github');
const { sendMessage, sendLongMessage } = require('../utils/message');
const { log, logError } = require('../utils/logger');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const DEFAULT_BRANCHES_LIMIT = 15;
const MAX_BRANCHES_LIMIT = 50;

// –ö–∞—Å—Ç–æ–º–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –∏ /)
function customEscape(text) {
  return text.replace(/[_*[\]()~`>#+=|{}.!]/g, '\\$&');
}

module.exports = async (ctx) => {
    const args = ctx.message.text.split(' ').slice(1);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    if (!args[0]?.includes('/')) {
        return sendMessage(
            ctx,
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /branches –≤–ª–∞–¥–µ–ª–µ—Ü/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ=15]\n' +
            '–ü—Ä–∏–º–µ—Ä—ã:\n' +
            '/branches facebook/react\n' +
            '/branches vuejs/core 25',
            { parse_mode: 'MarkdownV2' }
        );
    }

    const [owner, repo] = args[0].split('/');
    const repoName = `${owner}/${repo}`; // –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
    let limit = DEFAULT_BRANCHES_LIMIT;

    // –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–µ—Ç–æ–∫
    if (args.length >= 2 && !isNaN(args[1])) {
        limit = Math.min(parseInt(args[1]), MAX_BRANCHES_LIMIT);
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [totalBranches, branches, defaultBranch] = await Promise.all([
            getTotalBranchesCount(owner, repo),
            fetchRepoBranches(owner, repo, limit),
            getDefaultBranch(owner, repo)
        ]);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–µ—Ç–æ–∫
        if (!branches?.length) {
            return sendMessage(
                ctx,
                `üåø ${repoName}\n\n` +
                '–í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–µ—Ç–æ–∫',
                { parse_mode: 'HTML' }
            );
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–∞—Ö
        const branchesWithStatus = await Promise.all(
            branches.map(async branch => {
                const commit = await getBranchLastCommit(owner, repo, branch);
                return {
                    name: branch,
                    lastCommit: commit?.commit?.author?.date,
                    lastCommitSha: commit?.sha,
                    commitUrl: commit?.html_url || ''
                };
            })
        );
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        branchesWithStatus.sort((a, b) => {
            if (a.name === defaultBranch) return -1;
            if (b.name === defaultBranch) return 1;
            return new Date(b.lastCommit) - new Date(a.lastCommit);
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = `üå≥ <b>${repoName}</b> üå≥\n` +
                     `üìä <b>–í—Å–µ–≥–æ –≤–µ—Ç–æ–∫:</b> ${totalBranches} (–ø–æ–∫–∞–∑–∞–Ω–æ ${branches.length})\n` +
                     '‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ\n\n';

        branchesWithStatus.forEach(branch => {
            const isDefault = branch.name === defaultBranch;
            const statusEmoji = getBranchEmoji(branch.lastCommit);
            const shortSha = branch.lastCommitSha?.slice(0, 7) || 'unknown';
            const date = branch.lastCommit ? formatDate(branch.lastCommit) : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            
            message += `${isDefault ? 'üëë' : '‚ñ∏'} <b>${branch.name}</b> ` +
                      (isDefault ? '(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)' : '') + '\n' +
                      `   ${statusEmoji} –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: ${date}\n` +
                      `   üÜî ${shortSha} <a href="${branch.commitUrl}">–°—Å—ã–ª–∫–∞</a>\n\n`;
        });

        message += '‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ\n' +
                  `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–º–∏—Ç–æ–≤: /last ${repoName} [–≤–µ—Ç–∫–∞]\n` +
                  `–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –≤–µ—Ç–æ–∫: /branches ${repoName} [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ HTML-—Ä–µ–∂–∏–º–µ
        await sendLongMessage(ctx, message, { 
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });

    } catch (error) {
        logError(error, `Branches command failed: ${owner}/${repo}`);
        await sendMessage(
            ctx,
            `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
            { parse_mode: 'HTML' }
        );
    }
};

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function getBranchEmoji(lastCommitDate) {
    if (!lastCommitDate) return 'üî¥';
    const daysDiff = (Date.now() - new Date(lastCommitDate)) / (1000 * 60 * 60 * 24);
    if (daysDiff < 7) return 'üü¢';
    if (daysDiff < 30) return 'üü°';
    return 'üî¥';
}

function formatDate(dateString) {
    if (!dateString) return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
    });
}